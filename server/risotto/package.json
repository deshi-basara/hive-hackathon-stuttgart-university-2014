{
  "name": "risotto",
  "version": "0.0.1",
  "author": {
    "name": "Sebastian Otto",
    "email": "sebastian@wemakeweb.de"
  },
  "description": "",
  "repository": {
    "type": "git",
    "url": "https://github.com/heythere-project/yolo.git"
  },
  "dependencies": {
    "hiredis": "~0.1.17",
    "redis": "~0.11.0",
    "optimist": "*",
    "backbone-validation": "0.7.1",
    "ejs": "0.8.2",
    "consolidate": "*",
    "express-partials": "*",
    "connect-redis": "~1.4.5",
    "cradle": "~0.6.4",
    "gaze": "~0.3.3",
    "async": "*",
    "co": "~3.0.6",
    "js-yaml": "~3.1.0",
    "thunkify": "~2.1.2",
    "koa": "~0.8.2",
    "koala": "git+http://github.com/wemakeweb/koala.git",
    "koa-router": "~3.2.3",
    "delegates": "0.0.3",
    "underscore": "~1.6.0",
    "backbone": "~1.1.2",
    "koa-generic-session": "~1.2.0",
    "koa-redis": "~0.1.1",
    "co-exec": "~1.1.0",
    "koa-static": "~1.4.6",
    "koa-ejs": "~1.1.0",
    "co-fs": "~1.2.0",
    "co-redis": "~1.1.0",
    "generator-foreach": "~0.1.0"
  },
  "engines": {
    "node": ">=0.8"
  },
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "keywords": [],
  "license": "BSD-2-Clause",
  "bugs": {
    "url": "https://github.com/heythere-project/yolo/issues"
  },
  "readme": "[![NPM version](https://nodei.co/npm/yolo-server.png?downloads=true)](https://nodei.co/npm/yolo-server.png?downloads=true)\n#Yolo\nYolo is MVC webframework written in Nodejs heavily inspired by ruby on rails. It powers our Heythere servers. \n\n##Install\n__Yolo requires nodejs, couchdb and redis to run__\n```sh\n$ npm install yolo-server\n```\n\n#Scaffolding \nScaffolding for app structure, models and controllers is available via the [yolo-cli](https://github.com/heythere-project/yolo-cli).\n##Start\nYour app needs a special structure in order to get yolo running for you:\n```\napp/\n\tmodels/\n\tcontrollers/\n\tviews/\n\tpublic/\nconfig/\n\tproduction.js\n\tdevelopment.js\n\troutes.js\n```\nRequire yolo where ever you want and pass the those folders to the *run* method like so: \n\n\n```js\nvar Yolo = require('yolo-server'),\n\tserver = new Yolo();\n\nserver.run({\n\tapp : 'app/',\n\tconfig : 'config/'\n});\n\n```\nAfter calling *run* Yolo will boot up and look up all [models](https://github.com/heythere-project/yolo#models) files in /app/models and all [controllers](https://github.com/heythere-project/yolo#controllers) in /app/controllers. It will bind all [routes](https://github.com/heythere-project/yolo#routes) configured in the /config/routes.js file for you. \n__Be Aware__ that Yolo can be used in libary fashion but its a framework and it will register a global variable named \"Yolo\".\n\n#Models\nYolo.Model is basiclly a Backbone.Model extended with validation and a couchdb layer. Models go into `app/models` and are loaded automaticlly if Yolo boots. *Note* for now we only support couchdb as database.\n\nYou define a model by extending the Yolo.Model:\n```js\nmodule.exports = Yolo.Model.extend({ \t\t\n\t//â€¦\n});\n```\n\n###Attributes\nYou can define attributes for each model with default values and validation rules:\n```js\nattributes : {\n\t\tfirstName : {\n\t\t\trequired : true\n\t\t},\n\t\tlastName : {\n\t\t\trequired : true,\n\t\t},\n\t\temail : {\n\t\t\tpattern : 'email',\n\t\t},\n\t\tpassword : {\n\t\t\trequired : true,\n\t\t\tminLength : 5,\n\t\t\tsanitize : false\n\t\t},\n\t\tbio : {\n\t\t\trequired : false,\n\t\t\tmaxLength : 180\n\t\t},\n\t\tlastLogin : {\n\t\t\t\"default\" : new Date()\n\t\t},\n\t\tfriends : {\n\t\t\t\"default\" : [],\n\t\t}\n\t}\n```\nDefault values will be set if the attribute is not set with a value and validators will be checked before the model is saved to db or manual via [.isValid()](https://github.com/wemakeweb/heythere_appserver#isvalid).\n\nFull list of available validations:\nhttps://github.com/thedersen/backbone.validation#required\n\n###Views\nViews are the couchdb way to query the database. Views consists of a **map** and a **reduce** function. However,\nviews for each attribute will be autogenerated while booting. For example if your model has a attribute\n**firstName** we generate **Model.findByFirstName** for you. \nYou can define additional views with the 'views' property which will be callable after booting:\n```js\nviews : {\n\tmyCustomView : {\n\t\tmap : function(doc){\n\t\t\t// for eg emit(doc)\n\t\t},\n\t\treduce : function(){\n\t\t\t\n\t\t}\n\t}\n}\n```\nThis view would then be callabble via **Model.myCustomView**. The views will be saved as design document to couchdb.\n###Working with Models\n####get\nUse **Model.get(key)** to get attributes from a model:\n```js\nvar user = new User();\nuser.get('firstName');\n```\n####set\nUse **Model.set(key, value)** or **Model.set({ key1: value1})** to set attributes to the model:\n```js\nvar user = new User();\nuser.set('firstName');\n```\n\nIf you initialize a new model you can pass an object of keys and values which will be set, to the constructor:\n```js\nvar user = new User({\n\tname : params.name,\n\temail : params.email\n});\nuser.get('name');\n```\n####save\nSave a model with **save(options)** to the database like so:\n```js\nvar user = new User({\n\tname : params.name,\n\temail : params.email\n});\n\nuser.save({\n\tsuccess : function(){\n\t\tconsole.log(\"saved\");\n\t},\n\terror : function(){\n\t\tconsole.log(\"save failed\");\n\t}\n});\n```\n__Note__: Only valid models will be saved to database. You should call **Model.isValid()** before to check that.\n####isValid\nTo check if a model is valid:\n```js\nif( ! user.isValid() ){\n\tconsole.log(model.validationError)\n}\n```\n####attach(name, mimeType, buffer)\nYou can attach files to models which will be stored as attachments to couchdb via:\n```js\nuser.attach('profile', 'image/jpeg', imgBuffer);\n```\nAfter saving this to database you can get those attachments, for example in a template via:\n```js\nuser.attachments('profile').url\n```\n\n##Controllers\nControllers take the main part in handling incoming requests and processing them.\n\nA controller consists of a group of methods which handle one type of request defined in the **route**. Example:\n```js\nmodule.exports = Yolo.Controller.extend({\n\tindex : function(params){\n\t\tthis.renderHTML(\"dashboard/index\", {user : user });\n\t}\n});\n```\nThe params object passed to each method contains every parameter that might be passed to the server. In the methods you have access to the following methods:\n###this.renderHTML(path, options = {})\nRenders and returns a Html Template at **path**. Everything into the options object will be available as variable in the template.\n###this.html(path, options {});\nShortcut for **this.renderHTML**. This Method is chainable.\n\n###this.renderJSON(data = {})\nReturns a JSON Object containing the options.\n\n###this.json(data = {})\nShortcut for **this.renderJSON**. This Method is chainable.\n\n###this.status(code)\nSets the HTTP Status for that request. For Exmaple **this.status(200)**. This Method is chainable.\n\n###this.redirect(path)\nRedirects the Request to **path**\n\n###this.error(code [, message])\n Returns an http error with the given **code** and optional with the **message**.\n\n###this.authorize(data = {})\nauthorizes/logins the request. **data** will be saved associated with the session.\n\n###this.deAuthorize(cb)\ndeAuthorizes and destroys the session and deletes the associated data. **cb** gets called after the destory has finished.\n\n\n##Routes\nThe routes file in the config directory contains all the individual routes to the controllers. A route consists of a **key** and a **value**.\nThe **key** is the string we pass as \"path\" variable to express the path can also contain dynamic parts - read more about more here http://expressjs.com/api.html#app.VERB .\n\nThe **value** is either a object or an array of objects if the path should match different http methods. \n\n###Example:\n```js\t\t\n\"user/:id\" : { \t\n\t//routes to the controller named 'User' and the method named 'set'\n\tto : 'User.set',\n\t\n\t//the http method the route should match. can be either get, post, put or delete\n\tvia : 'post',\n\n\t//set false if the request dont have to be authorized\n\tauthorized : false\n}\n```\nYou can even match two routes to the same path but with different http methods like so:\n```js\n'user/register' : [{\n\tto : 'Users.registerForm',\n\tvia : 'get',\n},\n{\n\tto : 'Users.register',\n\tvia : 'post',\n\n}]\n```\n\n__Note:__ Each route will be checked while booting Yolo if the **to** parameters matches a controller.\n\n##Templates\nWe use the ejs Template Engine extend with ejs-locals. Ejs lets you write javascript code into Templates like so:\n```js\n<% if (currentUser) { %>\n    <h2><%= currentUser.get(\"name\") %></h2>\n<% } %>\n```\nUnbuffered code for conditionals etc <% code %>\nEscapes html by default with <%= code %>\nUnescaped buffering with <%- code %>\n\nDocumentation can be found here: https://github.com/visionmedia/ejs and here: https://github.com/publicclass/express-partials\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/heythere-project/yolo",
  "_id": "yolo-server@0.1.6",
  "dist": {
    "shasum": "d5446108e4a74aae7fcde50decd0219fffce48a7"
  },
  "_resolved": "git://github.com/heythere-project/yolo.git#a76819fc9785e142578bcd5fd93b2ad120af6b0a",
  "_from": "yolo-server@git://github.com/heythere-project/yolo.git"
}
